***Group By 
# It is very powerful keyword.
# It helps us to group our data based on column.
# Lets say we want to find out how many people we have for each of the country.

-> To see all the countries -> SELECT DISTINCT country_of_birth FROM person;
-> grouping by the country -> SELECT country_of_birth FROM person GROUP BY country_of_birth;
# Here we can see that we are grouping by the country but we aren't printing the counts for each one.
-> To print the count too -> SELECT country_of_birth, COUNT(*) FROM person GROUP BY country_of_birth;
# Here COUNT() is a aggregate function and we are counting every single person by *
# aggregate function computes a single result from a set of values.
# We can find all the aggregate function in this link below:
https://www.postgresql.org/docs/9.5/functions-aggregate.html




***Group By Having
# This command allows us to perform an extra filtering after we perform the group by.
# Group by and having needs to be distinguished.
# having is used before order by.

# Lets say we want to print all the countries which have atleast 20 people
-> SELECT country_of_birth, COUNT(*) FROM person GROUP BY country_of_birth HAVING COUNT(*) >= 20;
-> organize the data
-> SELECT country_of_birth, COUNT(*) FROM person GROUP BY country_of_birth HAVING COUNT(*) >= 20 ORDER BY COUNT(*);



# Now, we will create a brand new car table from mockaroo.



***Max, Min and Avarage
# Lets find out the most expensive car
-> SELECT MAX(price) FROM car;
# For printing the lest expensive car
-> SELECT MIN(price) FROM car;
# we can also get the Avarage
-> SELECT AVG(price) FROM car;

# here we can round the values with ROUND() function,
-> SELECT ROUND(AVG(price)) FROM car;
# we can pass another arguement in the round method just like python,
-> SELECT ROUND(AVG(price), 2) FROM car;

# we can also group the data and see minimum car price for each make
-> SELECT make, MIN(price) FROM car GROUP BY make ORDER by MIN(price);
# for max price
-> SELECT make, MAX(price) FROM car GROUP BY make ORDER by MAX(price) DESC;
# for avarage price
-> SELECT make, ROUND(AVG(price)) FROM car GROUP BY make ORDER by AVG(price) DESC;

# We can also group by multiple columns
-> SELECT make, model, MAX(price) FROM car GROUP BY make, model ORDER by MAX(price) DESC;



***Sum
# lets sum the total price of every single car of our table
-> SELECT SUM(price) FROM car;

# Now lets see the total sum by the actual car make
-> SELECT make, SUM(price) FROM car GROUP BY make ORDER BY SUM(price) DESC;